# _     _            _        _          _____
#| |__ | | __ _  ___| | _____| | ___   _|___ /
#| '_ \| |/ _` |/ __| |/ / __| |/ / | | | |_ \
#| |_) | | (_| | (__|   <\__ \   <| |_| |___) |
#|_.__/|_|\__,_|\___|_|\_\___/_|\_\\__, |____/
#                                  |___/

#Maintainer: blacksky3 <blacksky3@tuta.io> <https://github.com/blacksky3>
#Credits: Dan Johansen <strit@manjaro.org>
#Credits: Kevin Mihelich <kevin@archlinuxarm.org>

################################# Arch ################################

KARCH=arm64

#######################################################################

pkgbase=linux-manjaro-aarch64
pkgname=("$pkgbase" "$pkgbase-headers")
for _p in "${pkgname[@]}"; do
  eval "package_$_p() {
    $(declare -f "_package${_p#$pkgbase}")
    _package${_p#$pkgbase}
  }"
done
pkgver=5.16.11
pkgrel=1
arch=(aarch64)
url='https://www.kernel.org/'
license=(GPL-2.0)
makedepends=(xmlto docbook-xsl kmod inetutils bc git uboot-tools vboot-utils dtc)
options=(!strip)


archlinuxarmpatchsource=https://raw.githubusercontent.com/archlinuxarm/PKGBUILDs/37b6258b0b6a409722a647236db4840a4fb81d8f/core/linux-aarch64
manjaropatchsource=https://gitlab.manjaro.org/manjaro-arm/packages/core/linux/-/tree/f9abcab5512abb1724a6000cc854b02ac2a8abf1

source=(https://mirrors.edge.kernel.org/pub/linux/kernel/v5.x/linux-$pkgver.tar.xz
        ${manjaropatchsource}/config
        linux.preset
        60-linux.hook
        90-linux.hook
        # linux-aarch64 patches <https://github.com/archlinuxarm/PKGBUILDs/tree/master/core/linux-aarch64>
        ${archlinuxarmpatchsource}/0001-net-smsc95xx-Allow-mac-address-to-be-set-as-a-parame.patch
        ${archlinuxarmpatchsource}/0002-arm64-dts-rockchip-disable-pwm0-on-rk3399-firefly.patch
        # ALARM patches
        # Manjaro ARM Patches
        ${manjaropatchsource}/0001-arm64-dts-allwinner-add-hdmi-sound-to-pine-devices.patch            # Pine64
        ${manjaropatchsource}/0002-arm64-dts-allwinner-add-ohci-ehci-to-h5-nanopi.patch                # Nanopi Neo Plus 2
        ${manjaropatchsource}/0003-drm-bridge-analogix_dp-Add-enable_psr-param.patch                   # Pinebook Pro
        ${manjaropatchsource}/0004-gpu-drm-add-new-display-resolution-2560x1440.patch                  # Odroid
        ${manjaropatchsource}/0005-nuumio-panfrost-Silence-Panfrost-gem-shrinker-loggin.patch          # Panfrost
        ${manjaropatchsource}/0006-arm64-dts-rockchip-Add-Firefly-Station-p1-support.patch             # Firelfy Station P1
        ${manjaropatchsource}/0007-typec-displayport-some-devices-have-pin-assignments-reversed.patch  # DP Alt Mode
        ${manjaropatchsource}/0008-Add-megis-extcon-changes-to-fusb302.patch                           # DP Alt Mode
        ${manjaropatchsource}/0009-usb-typec-Add-megis-typex-to-extcon-bridge-driver.patch             # DP Alt Mode
        ${manjaropatchsource}/0010-arm64-rockchip-add-DP-ALT-rockpro64.patch                           # DP Alt mode - RockPro64
        ${manjaropatchsource}/0011-ayufan-drm-rockchip-add-support-for-modeline-32MHz-e.patch          # DP Alt mode
        ${manjaropatchsource}/0012-rk3399-rp64-pcie-Reimplement-rockchip-PCIe-bus-scan-delay.patch     # RockPro64
        ${manjaropatchsource}/0013-arm64-dts-rockchip-add-typec-extcon-hack.patch                      # DP Alt mode
        ${manjaropatchsource}/0014-drm-meson-add-YUV422-output-support.patch                           # G12B
        ${manjaropatchsource}/0015-arm64-dts-meson-add-initial-Beelink-GT1-Ultimate-dev.patch          # Beelink
        ${manjaropatchsource}/0016-add-ugoos-device.patch                                              # Ugoos
        ${manjaropatchsource}/0017-drm-panfrost-scheduler-fix.patch                                    # Panfrost
        ${manjaropatchsource}/0018-arm64-dts-rockchip-Add-pcie-bus-scan-delay-to-rockpr.patch          # RockPro64
        ${manjaropatchsource}/0019-drm-rockchip-support-gamma-control-on-RK3399.patch                  # RK3399
        ${manjaropatchsource}/0020-media-rockchip-rga-do-proper-error-checking-in-probe.patch          # Rockchip
        #${manjaropatchsource}/0021-arm-dts-rockchip-firefly-station-m2.patch                          # Firefly Station M2
        #${manjaropatchsource}/0022-add-dts-rk3568-station-p2.patch                                    # Firefly Station P2
        #${manjaropatchsource}/0023-add-dts-rk3568-radxa-rock3a.patch                                  # Radxa Rock3A
        ${manjaropatchsource}/0024-arm64-dts-rockchip-switch-to-hs200-on-rockpi4.patch                 # Rock Pi 4
        # Pinebook, PinePhone and PineTab patches
        ${manjaropatchsource}/0001-Bluetooth-Add-new-quirk-for-broken-local-ext-features.patch         # Bluetooth
        ${manjaropatchsource}/0002-Bluetooth-btrtl-add-support-for-the-RTL8723CS.patch                 # Bluetooth
        ${manjaropatchsource}/0003-arm64-allwinner-a64-enable-Bluetooth-On-Pinebook.patch              # Bluetooth
        ${manjaropatchsource}/0004-arm64-dts-allwinner-enable-bluetooth-pinetab-pinepho.patch          # Bluetooth
        ${manjaropatchsource}/0005-staging-add-rtl8723cs-driver.patch                                  # Wifi
        ${manjaropatchsource}/0006-pinetab-accelerometer.patch                                         # Accelerometer
        ${manjaropatchsource}/0007-enable-jack-detection-pinetab.patch                                 # Audio
        ${manjaropatchsource}/0008-Bluetooth-Read-codec-capabilities-only-if-supported.patch)          # Bluetooth

prepare(){

  cd "${srcdir}"/linux-$pkgver

  # add upstream patch
  #git apply --whitespace=nowarn ../patch-${pkgver}

  # Apply any patch
  local src
  for src in "${source[@]}"; do
    src="${src%%::*}"
    src="${src##*/}"
    [[ $src = *.patch ]] || continue
    msg2 "Applying patch $src..."
    patch -Np1 < "../$src"
  done

  # Copy the config file first
  # Copy "${srcdir}"/config to "${srcdir}"/linux-${pkgver}/.config
  msg2 "Copy "${srcdir}"/config to "${srcdir}"/linux-$pkgver/.config"
  cp "${srcdir}"/config .config

  # add pkgrel to extraversion
  #sed -ri "s|^(EXTRAVERSION =)(.*)|\1 \2-${pkgrel}|" Makefile

  scripts/config --disable CONFIG_LOCALVERSION

  msg2 "Setting localversion..."
  scripts/setlocalversion --save-scmversion
  echo "-${pkgbase}" > localversion

  make ARCH=${KARCH} -j$(nproc) olddefconfig

  make -s kernelrelease > version
  msg2 "Prepared $pkgbase version $(<version)"
}

build(){

  cd "${srcdir}"/linux-$pkgver

  unset LDFLAGS

  make ARCH=${KARCH} -j$(nproc) Image Image.gz modules

  # Generate device tree blobs with symbols to support applying device tree overlays in U-Boot
  make ARCH=${KARCH} -j$(nproc) DTC_FLAGS="-@" dtbs
}

_package(){
  pkgdesc='The Linux Kernel and modules with Manjaro ARM patches - AArch64 multi-platform'
  depends=(coreutils linux-firmware kmod initramfs)
  optdepends=('crda: to set the correct wireless channels of your country')
  provides=("linux=${pkgver}" WIREGUARD-MODULE)
  replaces=(linux-armv8)
  conflicts=(linux)
  install=${pkgbase}.install

  cd "${srcdir}"/linux-$pkgver

  local kernver="$(<version)"
  local modulesdir="${pkgdir}"/usr/lib/modules/${kernver}

  msg2 "Installing boot image and dtbs..."
  install -Dm644 arch/arm64/boot/Image{,.gz} -t "${pkgdir}/boot"
  make ARCH=${KARCH} -j$(nproc) INSTALL_DTBS_PATH="${pkgdir}/boot/dtbs" dtbs_install

  msg2 "Installing modules..."
  make ARCH=${KARCH} -j$(nproc) INSTALL_MOD_PATH="${pkgdir}/usr" INSTALL_MOD_STRIP=1 modules_install

  # remove build and source links
  msg2 "Remove build dir and source dir..."
  rm -rf "$modulesdir"/{source,build}

  # sed expression for following substitutions
  local _subst="
    s|%PKGBASE%|${pkgbase}|g
    s|%KERNVER%|${kernver}|g
  "

  # install mkinitcpio preset file
  sed "${_subst}" ../linux.preset | install -Dm644 /dev/stdin "${pkgdir}/etc/mkinitcpio.d/${pkgbase}.preset"

  # install pacman hooks
  sed "${_subst}" ../60-linux.hook | install -Dm644 /dev/stdin "${pkgdir}/usr/share/libalpm/hooks/60-${pkgbase}.hook"
  sed "${_subst}" ../90-linux.hook | install -Dm644 /dev/stdin "${pkgdir}/usr/share/libalpm/hooks/90-${pkgbase}.hook"
}

_package-headers() {
  pkgdesc='Header files and scripts for building modules for linux kernel - AArch64 multi-platform'
  provides=("linux-headers=${pkgver}")
  conflicts=(linux-headers)
  depends=("${pkgbase}")

  cd "${srcdir}"/linux-$pkgver

  local builddir="${pkgdir}/usr/lib/modules/${kernver}/build"

  echo "Installing build files..."
  install -Dt "$builddir" -m644 .config Makefile Module.symvers System.map vmlinux localversion
  install -Dt "$builddir/kernel" -m644 kernel/Makefile
  install -Dt "$builddir/arch/${KARCH}" -m644 arch/${KARCH}/Makefile
  cp -t "$builddir" -a scripts

  # add xfs and shmem for aufs building
  mkdir -p "$builddir"/{fs/xfs,mm}

  echo "Installing headers..."
  cp -t "$builddir" -a include
  cp -t "$builddir/arch/${KARCH}" -a arch/${KARCH}/include
  install -Dt "$builddir/arch/${KARCH}/kernel" -m644 arch/${KARCH}/kernel/asm-offsets.s
  mkdir -p "$builddir/arch/arm"
  cp -t "$builddir/arch/arm" -a arch/arm/include

  install -Dt "$builddir/drivers/md" -m644 drivers/md/*.h
  install -Dt "$builddir/net/mac80211" -m644 net/mac80211/*.h

  # https://bugs.archlinux.org/task/13146
  install -Dt "$builddir/drivers/media/i2c" -m644 drivers/media/i2c/msp3400-driver.h

  # https://bugs.archlinux.org/task/20402
  install -Dt "$builddir/drivers/media/usb/dvb-usb" -m644 drivers/media/usb/dvb-usb/*.h
  install -Dt "$builddir/drivers/media/dvb-frontends" -m644 drivers/media/dvb-frontends/*.h
  install -Dt "$builddir/drivers/media/tuners" -m644 drivers/media/tuners/*.h

  # https://bugs.archlinux.org/task/71392
  install -Dt "$builddir/drivers/iio/common/hid-sensors" -m644 drivers/iio/common/hid-sensors/*.h

  echo "Installing KConfig files..."
  find . -name 'Kconfig*' -exec install -Dm644 {} "$builddir/{}" \;

  echo "Removing unneeded architectures..."
  local arch
  for arch in "$builddir"/arch/*/; do
    [[ $arch = */${KARCH}/ || $arch == */arm/ ]] && continue
    echo "Removing $(basename "$arch")"
    rm -r "$arch"
  done

  echo "Removing documentation..."
  rm -r "$builddir/Documentation"

  echo "Removing broken symlinks..."
  find -L "$builddir" -type l -printf 'Removing %P\n' -delete

  echo "Removing loose objects..."
  find "$builddir" -type f -name '*.o' -printf 'Removing %P\n' -delete

  echo "Stripping build tools..."
  local file
  while read -rd '' file; do
    case "$(file -bi "$file")" in
      application/x-sharedlib\;*)      # Libraries (.so)
        strip -v $STRIP_SHARED "$file" ;;
      application/x-archive\;*)        # Libraries (.a)
        strip -v $STRIP_STATIC "$file" ;;
      application/x-executable\;*)     # Binaries
        strip -v $STRIP_BINARIES "$file" ;;
      application/x-pie-executable\;*) # Relocatable binaries
        strip -v $STRIP_SHARED "$file" ;;
    esac
  done < <(find "$builddir" -type f -perm -u+x ! -name vmlinux -print0)

  echo "Adding symlink..."
  mkdir -p "$pkgdir/usr/src"
  ln -sr "$builddir" "$pkgdir/usr/src/$pkgbase"
}

sha256sums=(6d186158a4c44a4df438e0286ee8186f1cc9cc9d8a909d4c3e25a4f7eca8b023
            3ac04657fb4a2e9292bf95c4cf22ca3fce0345ceada995745f7b513ff104201a
            6837b3e2152f142f3fff595c6cbd03423f6e7b8d525aac8ae3eb3b58392bd255
            452b8d4d71e1565ca91b1bebb280693549222ef51c47ba8964e411b2d461699c
            71df1b18a3885b151a3b9d926a91936da2acc90d5e27f1ad326745779cd3759d
            c850322ad82e53807c9d4844ee11e179bbdaa8082a952c998e13969aa12dd76c
            ddd6ccf14bfd117292828a50aab6d20fae161082b0094b4f12e2628649426b66
            485c461ce20de0835ae27e56adeb194f0a18f91a022d7b349710aa9e69043356
            679836037c69a72513d133520948bd0ca62b17ffb36430cebfd30bd2a4b43fcb
            87572ce987a80bb28ea25f40650c0e8f84fc00a0ad7bf8ce01aa107de36fed1c
            e53e1da546b3bd4a1aa18539ccc7fb3ad6f5c53aa191082f39f3651a2f1d40cb
            799e2403a95429ff380038e05700cd24e9220bf6fea76ad10ffd25385d0de09d
            5cb8d800241f4ff132cc6e9c57db743aa46589b56d49bf4d462b5cb7c8e27bee
            49cc5177f49fec81f0fe6785649161b1b4a02ec9c76a89f3b18af3bcc99aba85
            f333e7aee7c5f099128241f6520ed0320d0e1d196a75f426e5257efe75f6d4e1
            8cc43f2297c977a5ce3aca7f02192fe9726ec8963f8ad8e7ab266ec3687bc959
            e4afaa79a96857c8778ca997d5cbf26e06866ccd72b82c231c7e8535370bbbd3
            a9ea86ed01c615ab6f210eff1500776d78d29144f9c9423c13bc4fc6149a0eed
            13dcf28ea6ce7938ea9584720a2003ab75c89af8f35703237f72fd307056e2c9
            ec11507b86e819689050146c1047cf9e926895a74547dbc185ad7ecbf5aa782c
            bb4c32a2b12f470b0286a71e16b229d7969ecf7cb26261b805de0afd3a2141c0
            b3effd105f449873191e136aeb24d43ca888490216ed5e3d3a319ddfd183916a
            d8006bfb4aa607655c6563ceba7bc5da8b61d83664c739d91f9a4569076593bd
            1b60a302a7de9d9a70e286dc4a69d8845b82d16225e7b380cfb33a731d4d3a9a
            d11025755493be29be762bfdeb54ab199e070b7a51ee26b23a54ddf2cac059d1
            8b6f4630d7e2e7f309f9f70e41253f2c450432a40b1cf810cbbb6f63be9e2df7
            61745f02a8b18dc12b602d170c13636404f173b32304190f4f774e355077094a
            e05c3f9d2e1e08feba413fdcf996c12318356f57df8c8acd19e0939d050bbed5
            61923d22bc163fcb3152b5cc541b2a8bba4c5f54495c69da621d86503c3b8799
            c70ff7bc6f584546d0835d1dee1a38fd3aeb8f68d7dbcc8601416d6b33ce5afe
            ebe6bf7cd4bf7147b6e0eae65e48ce4d0813d6b0cd5f1161e7c45eaa19720ade
            d68f675951e1be8883919d809bc49b0d7cd2634a51a1515bad533b8904a9566f
            3513f3e8fde121ad6739aa313c90d2903c7dabf94bc1e54a0a1647726b77c256
            f536cdc46730463e38053446531a9bebdd89a9fa3862873a44eebecfc923f4c8
            b888c6875e5a6d470c8b1c21ddf87ad1b6fd3a716fe873459b5215f3f8c92b8e
            d0b1c8bf7313178724dd2b927b831f41fd9fdeb56b9131458b529199b92fdfc0)
